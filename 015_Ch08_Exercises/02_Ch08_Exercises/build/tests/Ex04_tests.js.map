{"version":3,"sources":["../../src/tests/Ex04_tests.js"],"names":[],"mappings":";;;;;;;;;IAMY,IAAI;;;;;;;;;;;;AAFT,IAAI,WAAW,WAAX,WAAW,GAAG,IAAI,CAAC;;AAQ9B,QAAQ,CAAC,wBAAwB,EAAE,YAAU;;;;;;;;;AAUzC,gBAAQ,CAAC,yCAAyC,EAAE,YAAU;;AAE1D,oBAAI,KAAK,GAAG,GAAG,CAAC;AAChB,oBAAI,QAAQ,GAAG,MAff,KAAK,CAegB,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B,oBAAI,MAAM,GAAG,WAlBb,QAAQ,EAkBc,KAAK,CAAC,CAAC;;AAE7B,kBAAE,CAAC,wDAAwD,EAAE,YAAU;;AAEnE,4BAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAC,MAAM,CAAC,GAAG,EAAE,EAAC,wCAAwC,CAAC,CAAC;iBAE/F,CAAC,CAAC;SAEN,CAAC,CAAC;;AAEH,gBAAQ,CAAC,uDAAuD,EAAE,YAAU;;AAExE,oBAAI,KAAK,GAAG,aAAa,CAAC;AAC1B,oBAAI,QAAQ,GAAG,MA7Bf,KAAK,CA6BgB,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,oBAAI,MAAM,GAAG,WAhCb,QAAQ,EAgCc,KAAK,CAAC,CAAC;;AAE7B,kBAAE,CAAC,0FAA0F,EAAE,YAAU;;AAErG,4BAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAC,MAAM,CAAC,GAAG,EAAE,EAAC,wCAAwC,CAAC,CAAC;iBAE/F,CAAC,CAAC;SAEN,CAAC,CAAC;;AAEH,gBAAQ,CAAC,4CAA4C,EAAE,YAAU;;AAE7D,oBAAI,KAAK,GAAG,IAAI,CAAC;AACjB,oBAAI,QAAQ,GAAG,MA3Cf,KAAK,CA2CgB,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,oBAAI,MAAM,GAAG,WA9Cb,QAAQ,EA8Cc,KAAK,CAAC,CAAC;;AAE7B,kBAAE,CAAC,4EAA4E,EAAE,YAAU;;AAEvF,4BAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAC,MAAM,CAAC,GAAG,EAAE,EAAC,wCAAwC,CAAC,CAAC;iBAE/F,CAAC,CAAC;SAEN,CAAC,CAAC;CAGN,CAAC,CAAC","file":"Ex04_tests.js","sourcesContent":["/**\r\n * Created by mike10 on 12/16/2015.\r\n */\r\n\r\nexport let __hotReload = true;\r\n\r\nimport * as Chai from 'chai';\r\n\r\nimport {intParse} from './../xlib/ExLib.js';\r\n\r\nimport {Maybe} from 'folktale/data';\r\n\r\ndescribe(\"Ex04 Functor Exercises\", function(){\r\n\r\n\r\n// Exercise 4\r\n// ==========\r\n// Use Maybe to rewrite ex4 without an if statement\r\n//var ex4 = function (n) {\r\n//    if (n) { return parseInt(n); }\r\n//};\r\n\r\n    describe(\"Ex04-1 - parse valid integer intParse()\", function(){\r\n\r\n        var input = \"3\";\r\n        var expected = Maybe.of(3);\r\n        var result = intParse(input);\r\n\r\n        it(\"intParse should return integer 3 for input string '3' \", function(){\r\n\r\n            Chai.assert.deepEqual(expected.get(),result.get(),\"Error: 'intParse()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Ex04-2 - parse INVALID integer string with intParse()\", function(){\r\n\r\n        var input = \"Hello world\";\r\n        var expected = Maybe.Just(NaN);\r\n        var result = intParse(input);\r\n\r\n        it(\"intParse should return Maybe with value of 'NaN' for invalid input string 'hello world' \", function(){\r\n\r\n            Chai.assert.deepEqual(expected.get(),result.get(),\"Error: 'intParse()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Ex04-3 - parse null string with intParse()\", function(){\r\n\r\n        var input = null;\r\n        var expected = Maybe.Just(NaN);\r\n        var result = intParse(input);\r\n\r\n        it(\"intParse should return Maybe with value of 'NaN' for invalid input = null \", function(){\r\n\r\n            Chai.assert.deepEqual(expected.get(),result.get(),\"Error: 'intParse()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n\r\n});\r\n\r\n\r\n"]}