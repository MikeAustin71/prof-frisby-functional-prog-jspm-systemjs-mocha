{"version":3,"sources":["../../src/tests/Ex01_tests.js"],"names":[],"mappings":"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","file":"Ex01_tests.js","sourcesContent":["/**\r\n * Created by mike10 on 12/20/2015.\r\n */\r\n\r\nexport let __hotReload = true;\r\nimport * as Chai from 'chai';\r\n\r\nimport {safeProp, safeHead, firstAddressStreet} from './../xlib/ExLib.js';\r\nimport {Maybe} from 'folktale/data';\r\n\r\ndescribe(\"Ex01 SafeProp Exercises\", function(){\r\n\r\n\r\n    describe(\"Ex01-1 - safeProp Example\", function(){\r\n\r\n        var Addr = {Addr1: '91210 Hwy 290 West', Addr2: 'Ste 5290', Addr3:'Box 152', City:'Austin', St:'TX', Zip:91210};\r\n        var expected = Maybe.of('91210 Hwy 290 West');\r\n        var result = safeProp('Addr1', Addr);\r\n\r\n        it(\"safeProp('Addr1',Addr) should return '91210 Hwy 290 West' \", function(){\r\n\r\n            Chai.assert.deepEqual(expected.get(),result.get(),\"Error: 'safeProp()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Ex01-2 - safeHead Example\", function(){\r\n\r\n        var txAddresses = [\r\n            {Addr1: '91210 Hwy 290 West', Addr2: 'Ste 5290', Addr3:'Box 152', City:'Austin', St:'TX', Zip:91210},\r\n            {Addr1: '21360 Kimball Ave', Addr2: '', Addr3:'', City:'Raymondville', St:'TX', Zip:75911},\r\n            {Addr1: '5 DuckBill Trail', Addr2: '', Addr3:'', City:'Taylor', St:'TX', Zip:52119}\r\n        ];\r\n\r\n        var expected = Maybe.of({Addr1: '91210 Hwy 290 West', Addr2: 'Ste 5290', Addr3:'Box 152', City:'Austin', St:'TX', Zip:91210});\r\n        var result = safeHead(txAddresses);\r\n\r\n        it(\"safeHead(txAddresses) should return '91210 Hwy 290 West' \", function(){\r\n\r\n            Chai.assert.deepEqual(expected,result,\"Error: 'safeHead()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Ex01-3 - firstStreetAddress Example\", function(){\r\n\r\n        var txAddr =\r\n        {\r\n            addresses:[\r\n                {street:{name: 'Hwy 290 West', number: '555555'}, Zip:91210},\r\n                {street:{name: 'Kimball Ave', number: '21360'}, Zip:75911},\r\n                {street:{name: 'DuckBill Trail', number: '5'}, Zip:52119}\r\n            ],\r\n            cities: [\r\n                {city: 'Austin', state: 'TX'},\r\n                {city: 'Raymondville', state: 'TX'},\r\n                {city: 'Taylor', state: 'TX'}\r\n            ]\r\n\r\n        };\r\n\r\n\r\n        var expected = Maybe.of(Maybe.of(Maybe.of({name: 'Hwy 290 West', number: '555555'})));\r\n        var result = firstAddressStreet(txAddr);\r\n\r\n        it(\"safeHead(txAddresses) should return Maybe 3-levels deep -> '{name: 'Hwy 290 West', number: '555555'}' \", function(){\r\n\r\n            Chai.assert.deepEqual(expected,result,\"Error: 'safeHead()' result is INVALID!\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n});\r\n\r\n\r\n"]}